---
description: 
globs: 
alwaysApply: false
---
---
description: Test Driven Development (TDD) standards for the elemental game project
glob: "**/*.{ts,tsx,js,jsx}"
---

# Test Driven Development Rules

The project follows Test Driven Development (TDD) methodology. This means all logic implementation must adhere to these rules:

## Core TDD Principles

1. **Tests First**:
   - Write tests before implementing the actual functionality
   - Tests should define the expected behavior of the function or component
   - Tests should initially fail when run against unimplemented code

2. **Minimal Implementation**:
   - Write the minimal code necessary to make tests pass
   - Refactor the code only after tests pass
   - Follow the Red-Green-Refactor cycle (fail, pass, improve)

3. **Test Integrity**:
   - Never modify tests to make them pass implementation
   - Tests should only be modified when:
     - There's an explicit change to the functionality requirements
     - There are issues with the testing library itself
     - The test contains actual errors in its assertion logic

4. **Test Coverage**:
   - Every function should have corresponding tests
   - Cover normal operation, edge cases, and error handling
   - Aim for high test coverage, especially in core business logic

## Testing Guidelines

1. **Test Organization**:
   - Group tests logically by feature or component
   - Use descriptive test names that explain the expected behavior
   - Structure tests with arrange-act-assert pattern

2. **Testing Isolation**:
   - Each test should be independent of others
   - Mock external dependencies and services
   - Reset state between tests when needed

3. **Integration With Workflow**:
   - Run tests locally before committing changes
   - CI pipeline should run all tests automatically
   - Failing tests should block merges to main branches

## TDD Process

1. **Starting a New Feature**:
   - Write failing tests that describe the feature requirements
   - Implement minimal code to pass tests
   - Refactor while keeping tests green

2. **Bug Fixes**:
   - Write a test that reproduces the bug
   - Fix the bug so the test passes
   - Ensure all existing tests still pass

3. **Refactoring**:
   - Only refactor after tests pass
   - Run tests after each small refactoring step
   - Never refactor and add features simultaneously

Remember: The tests define the contract that your code must fulfill. They are the source of truth for the expected behavior, not the other way around.
